{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1KPYOlrLnigbZOtoI2azzJqyvpRCQvK6u","authorship_tag":"ABX9TyMvll/sqFYZ/2KO9JaiTKYe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Find S with accuracy for enjoy sport dataset\n","\n"],"metadata":{"id":"kaFecf1TZnZ3"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from google.colab import drive\n","drive.mount(\"/content/drive\")\n","path = \"/content/drive/MyDrive/ML Lab/Lab 2/enjoysport-1BM20CS078.csv\"\n","data = pd.read_csv(path)\n","print(data, \"\\n\")\n","\n","d = np.array(data)[:, :-1]\n","print(\"\\nThe attributes are:\", d)\n","\n","target = np.array(data)[:, -1]\n","print(\"\\nThe target is:\", target)\n","\n","\n","def findS(c, t):\n","    for i, val in enumerate(t):\n","        if val == \"Yes\":\n","            specific_hypothesis = c[i].copy()\n","            break\n","\n","    for i, val in enumerate(c):\n","        if t[i] == \"Yes\":\n","            for x in range(len(specific_hypothesis)):\n","                if val[x] != specific_hypothesis[x]:\n","                    specific_hypothesis[x] = '?'\n","                else:\n","                    pass\n","\n","    return specific_hypothesis\n","\n","\n","hypothesis = findS(d, target)\n","print(\"\\nThe final hypothesis is:\", hypothesis)\n","\n","\n","def predict(data, hypothesis):\n","    predicted_targets = []\n","    for instance in data:\n","        match = True\n","        for i in range(len(hypothesis)):\n","            if hypothesis[i] != '?' and hypothesis[i] != instance[i]:\n","                match = False\n","                break\n","        if match:\n","            predicted_targets.append(\"Yes\")\n","        else:\n","            predicted_targets.append(\"No\")\n","    return predicted_targets\n","\n","\n","predicted_targets = predict(d, hypothesis)\n","print(\"\\nPredicted targets:\", predicted_targets)\n","\n","\n","def calculate_accuracy(actual, predicted):\n","    correct = sum(1 for a, p in zip(actual, predicted) if a == p)\n","    total = len(actual)\n","    accuracy = correct / total * 100\n","    return accuracy\n","\n","\n","accuracy = calculate_accuracy(target, predicted_targets)\n","print(\"\\nAccuracy:\", accuracy)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HrK5ZTq5ZvZp","executionInfo":{"status":"ok","timestamp":1687677557548,"user_tz":-330,"elapsed":4050,"user":{"displayName":"Lokesh R Computer Science","userId":"01731973015646523100"}},"outputId":"620f9611-1885-4aac-be54-c66b0759876c"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","     Sky AirTemp Humidity    Wind Water Forecast EnjoySport\n","0  Sunny    Warm   Normal  Strong  Warm     Same        Yes\n","1  Sunny    Warm     High  Strong  Warm     Same        Yes\n","2  Rainy    Cold     High  Strong  Warm   Change         No\n","3  Sunny    Warm     High  Strong  Cool   Change        Yes \n","\n","\n","The attributes are: [['Sunny' 'Warm' 'Normal' 'Strong' 'Warm' 'Same']\n"," ['Sunny' 'Warm' 'High' 'Strong' 'Warm' 'Same']\n"," ['Rainy' 'Cold' 'High' 'Strong' 'Warm' 'Change']\n"," ['Sunny' 'Warm' 'High' 'Strong' 'Cool' 'Change']]\n","\n","The target is: ['Yes' 'Yes' 'No' 'Yes']\n","\n","The final hypothesis is: ['Sunny' 'Warm' '?' 'Strong' '?' '?']\n","\n","Predicted targets: ['Yes', 'Yes', 'No', 'Yes']\n","\n","Accuracy: 100.0\n"]}]},{"cell_type":"markdown","source":["Find S with accuracy for citation dataset\n"],"metadata":{"id":"1xL3O3uNbExs"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from google.colab import drive\n","drive.mount(\"/content/drive\")\n","path = \"/content/drive/MyDrive/ML Lab/Lab 2/seconddataset.csv\"\n","data = pd.read_csv(path)\n","print(data, \"\\n\")\n","\n","d = np.array(data)[:, :-1]\n","print(\"\\nThe attributes are:\", d)\n","\n","target = np.array(data)[:, -1]\n","print(\"\\nThe target is:\", target)\n","\n","\n","def findS(c, t):\n","    for i, val in enumerate(t):\n","        if val == \"yes\":\n","            specific_hypothesis = c[i].copy()\n","            break\n","\n","    for i, val in enumerate(c):\n","        if t[i] == \"yes\":\n","            for x in range(len(specific_hypothesis)):\n","                if val[x] != specific_hypothesis[x]:\n","                    specific_hypothesis[x] = '?'\n","                else:\n","                    pass\n","\n","    return specific_hypothesis\n","\n","\n","hypothesis = findS(d, target)\n","print(\"\\nThe final hypothesis is:\", hypothesis)\n","\n","\n","def predict(data, hypothesis):\n","    predicted_targets = []\n","    for instance in data:\n","        match = True\n","        for i in range(len(hypothesis)):\n","            if hypothesis[i] != '?' and hypothesis[i] != instance[i]:\n","                match = False\n","                break\n","        if match:\n","            predicted_targets.append(\"yes\")\n","        else:\n","            predicted_targets.append(\"no\")\n","    return predicted_targets\n","\n","\n","predicted_targets = predict(d, hypothesis)\n","print(\"\\nPredicted targets:\", predicted_targets)\n","\n","\n","def calculate_accuracy(actual, predicted):\n","    correct = sum(1 for a, p in zip(actual, predicted) if a == p)\n","    total = len(actual)\n","    accuracy = correct / total * 100\n","    return accuracy\n","\n","\n","accuracy = calculate_accuracy(target, predicted_targets)\n","print(\"\\nAccuracy:\", accuracy)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UsjlyLh7bKCq","executionInfo":{"status":"ok","timestamp":1687677708513,"user_tz":-330,"elapsed":3582,"user":{"displayName":"Lokesh R Computer Science","userId":"01731973015646523100"}},"outputId":"49709ef8-cbe1-408c-b546-13d17ebada72"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","  citations    size inLibrary       price editions  buy\n","0      some   small        no  affordable     many   no\n","1      many     big        no   expensive      one  yes\n","2      some     big    always   expensive      few   no\n","3      many  medium        no   expensive     many  yes\n","4      many   small        no  affordable     many  yes \n","\n","\n","The attributes are: [['some' 'small' 'no' 'affordable' 'many']\n"," ['many' 'big' 'no' 'expensive' 'one']\n"," ['some' 'big' 'always' 'expensive' 'few']\n"," ['many' 'medium' 'no' 'expensive' 'many']\n"," ['many' 'small' 'no' 'affordable' 'many']]\n","\n","The target is: ['no' 'yes' 'no' 'yes' 'yes']\n","\n","The final hypothesis is: ['many' '?' 'no' '?' '?']\n","\n","Predicted targets: ['no', 'yes', 'no', 'yes', 'yes']\n","\n","Accuracy: 100.0\n"]}]}]}